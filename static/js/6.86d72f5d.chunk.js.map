{"version":3,"sources":["components/common/FormControls/FormsControls.js","components/common/FormControls/FormsControls.module.css","utils/validators/validators.js","components/Login/Login.js"],"names":["FormControl","input","meta","touched","error","children","hasError","className","style","Textarea","props","restProps","child","Input","CreateField","validate","placeholder","name","component","text","module","exports","required","value","maxLengthCreator","maxLength","length","LoginReduxFrom","reduxForm","form","handleSubmit","captchaUrl","onSubmit","type","src","alt","login_error","connect","state","isAuth","auth","login","to","formData","email","password","rememberMe"],"mappings":"6SAGMA,EAAc,SAAC,GAA+C,EAA7CC,MAA8C,IAAD,IAAtCC,KAAOC,EAA+B,EAA/BA,QAAQC,EAAuB,EAAvBA,MAAQC,EAAe,EAAfA,SAC7CC,EAAWH,GAAWC,EAC5B,OACE,sBAAKG,UAAWD,EAAWE,IAAMJ,MAAQ,GAAzC,UACE,8BAAOC,IAENC,GAAY,+BAAOF,QAKbK,EAAW,SAACC,GACvB,IAAQT,EAAqCS,EAArCT,MAAuBU,GAAcD,EAA9BR,KAA8BQ,EAAxBE,MAArB,YAA6CF,EAA7C,IACA,OACE,cAACV,EAAD,2BAAiBU,GAAjB,aACE,oDAAcT,GAAWU,QAKlBE,EAAQ,SAACH,GACpB,IAAQT,EAAqCS,EAArCT,MAAuBU,GAAcD,EAA9BR,KAA8BQ,EAAxBE,MAArB,YAA6CF,EAA7C,IACA,OACE,cAACV,EAAD,2BAAiBU,GAAjB,aACE,iDAAWT,GAAWU,QAKfG,EAAc,SAACC,EAAUC,EAAaC,EAAMC,GAAkC,IAAvBR,EAAsB,uDAAhB,GAAIS,EAAY,uDAAP,GACjF,OACE,gCACE,cAAC,IAAD,aACEJ,SAAUA,EACVC,YAAaA,EACbC,KAAMA,EACNC,UAAWA,GACPR,IANR,IAOMS,O,oBCxCVC,EAAOC,QAAU,CAAC,MAAQ,6BAA6B,YAAc,qC,iCCDrE,oEAAO,IAAMC,EAAW,SAACC,GACvB,IAAIA,EACJ,MAAO,qBAGIC,EAAmB,SAACC,GAAD,OAAe,SAACF,GAC9C,GAAIA,EAAMG,OAASD,EAAW,MAAM,iBAAN,OAAwBA,EAAxB,e,iCCNhC,sFAkCME,EAAiBC,YAAU,CAC/BC,KAAM,SADeD,EA3BL,SAAC,GAAyC,IAAvCE,EAAsC,EAAtCA,aAAc1B,EAAwB,EAAxBA,MAAO2B,EAAiB,EAAjBA,WACxC,OACE,uBAAMC,SAAUF,EAAhB,UACGhB,YAAY,CAACQ,KAAW,QAAS,QAAST,KAC1CC,YAAY,CAACQ,KAAW,WAAY,WAAYT,IAAO,CACtDoB,KAAM,aAEPnB,YACC,KACA,KACA,aACAD,IACA,CAAEoB,KAAM,YACR,eAGDF,GAAc,qBAAKG,IAAKH,EAAYI,IAAI,YACxCJ,GACCjB,YAAY,CAACQ,KAAW,qBAAsB,UAAWT,KAE1DT,GAAS,qBAAKG,UAAWC,IAAM4B,YAAtB,SAAoChC,IAE9C,iDA8BSiC,uBALS,SAACC,GAAD,MAAY,CAClCC,OAAQD,EAAME,KAAKD,OACnBR,WAAYO,EAAME,KAAKT,cAGe,CAAEU,WAA3BJ,EArBD,SAAC3B,GAIb,OAAIA,EAAM6B,OACD,cAAC,IAAD,CAAUG,GAAI,aAIrB,gCACE,uCACA,cAACf,EAAD,CAAgBI,WAAYrB,EAAMqB,WAAYC,SAVjC,SAACW,GAChBjC,EAAM+B,MAAME,EAASC,MAAOD,EAASE,SAAUF,EAASG","file":"static/js/6.86d72f5d.chunk.js","sourcesContent":["import style from \"./FormsControls.module.css\";\nimport { Field } from \"redux-form\";\n\nconst FormControl = ({ input, meta: {touched,error}, children }) => {\n  const hasError = touched && error;\n  return (\n    <div className={hasError ? style.error : \"\"}>\n      <div>{ children}</div>\n\n      {hasError && <span>{error}</span>}\n    </div>\n  );\n};\n\nexport const Textarea = (props) => {\n  const { input, meta, child, ...restProps } = props;\n  return (\n    <FormControl {...props}>\n      <textarea {...input} {...restProps} />\n    </FormControl>\n  );\n};\n\nexport const Input = (props) => {\n  const { input, meta, child, ...restProps } = props;\n  return (\n    <FormControl {...props}>\n      <input {...input} {...restProps} />\n    </FormControl>\n  );\n};\n\nexport const CreateField = (validate, placeholder, name, component, props={}, text=\"\") => {\n  return (\n    <div>\n      <Field\n        validate={validate}\n        placeholder={placeholder}\n        name={name}\n        component={component}\n        {...props}\n      /> {text}\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"FormsControls_error__2i_51\",\"login_error\":\"FormsControls_login_error__1k65A\"};","export const required = (value) => {\n  if (value) return undefined;\n  return \"field is required\";\n};\n\nexport const maxLengthCreator = (maxLength) => (value) => {\n  if (value.length > maxLength) return `max length is ${maxLength} symbols`;\n  return undefined;\n};\n","import { reduxForm } from \"redux-form\";\nimport { CreateField, Input } from \"../common/FormControls/FormsControls\";\nimport { required } from \"../../utils/validators/validators\";\nimport { connect } from \"react-redux\";\nimport { login } from \"../../state/authReducer\";\nimport { Redirect } from \"react-router\";\nimport style from \"../common/FormControls/FormsControls.module.css\";\nconst LoginForm = ({ handleSubmit, error, captchaUrl }) => {\n  return (\n    <form onSubmit={handleSubmit}>\n      {CreateField([required], \"email\", \"email\", Input)}\n      {CreateField([required], \"password\", \"password\", Input, {\n        type: \"password\",\n      })}\n      {CreateField(\n        null,\n        null,\n        \"rememberMe\",\n        Input,\n        { type: \"checkbox\" },\n        \"remember Me\"\n      )}\n\n      {captchaUrl && <img src={captchaUrl} alt=\"captcha\" />}\n      {captchaUrl &&\n        CreateField([required], \"Symbols from image\", \"captcha\", Input)}\n\n      {error && <div className={style.login_error}>{error}</div>}\n\n      <button>Login</button>\n    </form>\n  );\n};\n\nconst LoginReduxFrom = reduxForm({\n  form: \"login\",\n})(LoginForm);\n\nconst Login = (props) => {\n  const onSubmit = (formData) => {\n    props.login(formData.email, formData.password, formData.rememberMe);\n  };\n  if (props.isAuth) {\n    return <Redirect to={\"/profile\"} />;\n  }\n\n  return (\n    <div>\n      <h1>LOGIN</h1>\n      <LoginReduxFrom captchaUrl={props.captchaUrl} onSubmit={onSubmit} />\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  isAuth: state.auth.isAuth,\n  captchaUrl: state.auth.captchaUrl,\n});\n\nexport default connect(mapStateToProps, { login })(Login);\n"],"sourceRoot":""}