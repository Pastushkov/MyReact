{"version":3,"sources":["components/common/FormControls/FormsControls.module.css","utils/validators/validators.js","components/common/FormControls/FormsControls.js","components/Login/Login.js"],"names":["module","exports","required","value","maxLengthCreator","maxLength","length","FormControl","input","meta","touched","error","children","hasError","className","style","Textarea","props","restProps","child","Input","CreateField","validate","placeholder","name","component","text","LoginReduxFrom","reduxForm","form","handleSubmit","onSubmit","type","login_error","connect","state","isAuth","auth","login","to","formData","email","password","rememberMe"],"mappings":"+EACAA,EAAOC,QAAU,CAAC,MAAQ,6BAA6B,YAAc,qC,iCCDrE,oEAAO,IAAMC,EAAW,SAACC,GACvB,IAAIA,EACJ,MAAO,qBAGIC,EAAmB,SAACC,GAAD,OAAe,SAACF,GAC9C,GAAIA,EAAMG,OAASD,EAAW,MAAM,iBAAN,OAAwBA,EAAxB,e,kPCH1BE,EAAc,SAAC,GAA+C,EAA7CC,MAA8C,IAAD,IAAtCC,KAAOC,EAA+B,EAA/BA,QAAQC,EAAuB,EAAvBA,MAAQC,EAAe,EAAfA,SAC7CC,EAAWH,GAAWC,EAC5B,OACE,sBAAKG,UAAWD,EAAWE,IAAMJ,MAAQ,GAAzC,UACE,8BAAOC,IAENC,GAAY,+BAAOF,QAKbK,EAAW,SAACC,GACvB,IAAQT,EAAqCS,EAArCT,MAAuBU,GAAcD,EAA9BR,KAA8BQ,EAAxBE,MAArB,YAA6CF,EAA7C,IACA,OACE,cAACV,EAAD,2BAAiBU,GAAjB,aACE,oDAAcT,GAAWU,QAKlBE,EAAQ,SAACH,GACpB,IAAQT,EAAqCS,EAArCT,MAAuBU,GAAcD,EAA9BR,KAA8BQ,EAAxBE,MAArB,YAA6CF,EAA7C,IACA,OACE,cAACV,EAAD,2BAAiBU,GAAjB,aACE,iDAAWT,GAAWU,QAKfG,EAAc,SAACC,EAAUC,EAAaC,EAAMC,GAAkC,IAAvBR,EAAsB,uDAAhB,GAAIS,EAAY,uDAAP,GACjF,OACE,gCACE,cAAC,IAAD,aACEJ,SAAUA,EACVC,YAAaA,EACbC,KAAMA,EACNC,UAAWA,GACPR,IANR,IAOMS,O,iCCzCV,sFAuBMC,EAAiBC,YAAU,CAC/BC,KAAM,SADeD,EAhBL,SAAC,GAA6B,IAA3BE,EAA0B,EAA1BA,aAAcnB,EAAY,EAAZA,MACjC,OACE,uBAAMoB,SAAUD,EAAhB,UACGT,YAAY,CAACnB,KAAW,QAAS,QAASkB,KAC1CC,YAAY,CAACnB,KAAW,WAAY,WAAYkB,IAAO,CACtDY,KAAM,aAEPX,YAAY,KAAM,KAAM,aAAcD,IAAO,CAAEY,KAAM,YAAc,eAEnErB,GAAS,qBAAKG,UAAWC,IAAMkB,YAAtB,SAAoCtB,IAE9C,iDA6BSuB,uBAJS,SAACC,GAAD,MAAY,CAClCC,OAAQD,EAAME,KAAKD,UAGmB,CAAEE,WAA3BJ,EApBD,SAACjB,GAIb,OAAIA,EAAMmB,OACD,cAAC,IAAD,CAAUG,GAAI,aAIrB,gCACE,uCACA,cAACZ,EAAD,CAAgBI,SAVH,SAACS,GAChBvB,EAAMqB,MAAME,EAASC,MAAOD,EAASE,SAAUF,EAASG","file":"static/js/6.dee28460.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"FormsControls_error__2i_51\",\"login_error\":\"FormsControls_login_error__1k65A\"};","export const required = (value) => {\n  if (value) return undefined;\n  return \"field is required\";\n};\n\nexport const maxLengthCreator = (maxLength) => (value) => {\n  if (value.length > maxLength) return `max length is ${maxLength} symbols`;\n  return undefined;\n};\n","import style from \"./FormsControls.module.css\";\nimport { Field } from \"redux-form\";\n\nconst FormControl = ({ input, meta: {touched,error}, children }) => {\n  const hasError = touched && error;\n  return (\n    <div className={hasError ? style.error : \"\"}>\n      <div>{ children}</div>\n\n      {hasError && <span>{error}</span>}\n    </div>\n  );\n};\n\nexport const Textarea = (props) => {\n  const { input, meta, child, ...restProps } = props;\n  return (\n    <FormControl {...props}>\n      <textarea {...input} {...restProps} />\n    </FormControl>\n  );\n};\n\nexport const Input = (props) => {\n  const { input, meta, child, ...restProps } = props;\n  return (\n    <FormControl {...props}>\n      <input {...input} {...restProps} />\n    </FormControl>\n  );\n};\n\nexport const CreateField = (validate, placeholder, name, component, props={}, text=\"\") => {\n  return (\n    <div>\n      <Field\n        validate={validate}\n        placeholder={placeholder}\n        name={name}\n        component={component}\n        {...props}\n      /> {text}\n    </div>\n  );\n};\n","import { reduxForm } from \"redux-form\";\nimport { CreateField, Input } from \"../common/FormControls/FormsControls\";\nimport { required } from \"../../utils/validators/validators\";\nimport { connect } from \"react-redux\";\nimport { login } from \"../../state/authReducer\";\nimport { Redirect } from \"react-router\";\nimport style from \"../common/FormControls/FormsControls.module.css\";\nconst LoginForm = ({ handleSubmit, error }) => {\n  return (\n    <form onSubmit={handleSubmit}>\n      {CreateField([required], \"email\", \"email\", Input)}\n      {CreateField([required], \"password\", \"password\", Input, {\n        type: \"password\",\n      })}\n      {CreateField(null, null, \"rememberMe\", Input, { type: \"checkbox\" }, \"remember Me\")}\n\n      {error && <div className={style.login_error}>{error}</div>}\n\n      <button>Login</button>\n    </form>\n  );\n};\n\nconst LoginReduxFrom = reduxForm({\n  form: \"login\",\n})(LoginForm);\n\nconst Login = (props) => {\n  const onSubmit = (formData) => {\n    props.login(formData.email, formData.password, formData.rememberMe);\n  };\n  if (props.isAuth) {\n    return <Redirect to={\"/profile\"} />;\n  }\n\n  return (\n    <div>\n      <h1>LOGIN</h1>\n      <LoginReduxFrom onSubmit={onSubmit} />\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  isAuth: state.auth.isAuth,\n});\n\nexport default connect(mapStateToProps, { login })(Login);\n"],"sourceRoot":""}